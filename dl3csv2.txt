import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import tensorflow 
from tensorflow import keras 
from tensorflow.keras import datasets 
from tensorflow.keras import models, layers 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout 
# Read the training data 
train_data = pd.read_csv('mnist_fashion_train.csv')  # Replace with the actual path 
# Read the test data 
test_data = pd.read_csv('mnist_fashion_test.csv')  # Replace with the actual path 
# For the training set 
X_train = train_data.iloc[:, :-1].values  # All columns except the last one for the features 
(image data) 
y_train = train_data.iloc[:, -1].values   # Last column for the labels 
# For the test set 
X_test = test_data.iloc[:, :-1].values  # All columns except the last one for the features 
(image data) 
y_test = test_data.iloc[:, -1].values   # Last column for the labels 
# Reshape and normalize image data 
X_train = X_train.reshape(-1, 28, 28, 1).astype('float32') / 255.0 
X_test = X_test.reshape(-1, 28, 28, 1).astype('float32') / 255.0 
# Build the model 
model = Sequential() 
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1))) 
model.add(MaxPooling2D(pool_size=(2, 2))) 
model.add(Flatten()) 
model.add(Dense(128, activation="relu")) 
model.add(Dense(10, activation="softmax")) 
# Compile the model 
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', 
metrics=['accuracy']) 
# Check unique labels in training and testing sets 
print("Unique labels in training data:", np.unique(y_train)) 
print("Unique labels in test data:", np.unique(y_test)) 
# Filter invalid labels from the training set 
valid_labels = np.unique(y_train) 
valid_train_indices = np.where((y_train >= 0) & (y_train < 10)) 
X_train = X_train[valid_train_indices] 
y_train = y_train[valid_train_indices] 
# Filter invalid labels from the test set 
valid_test_indices = np.where((y_test >= 0) & (y_test < 10)) 
X_test = X_test[valid_test_indices] 
y_test = y_test[valid_test_indices] 
# Train the model 
model.fit(X_train, y_train, epochs=5) 
# Evaluate the model on the test set 
evaluation = model.evaluate(X_test, y_test) 
print(f"Test loss: {evaluation[0]}") 
print(f"Test accuracy: {evaluation[1]}") 
# Label for the classes 
labels = ['t_shirt', 'trouser', 'pullover', 'dress', 'coat', 'sandal', 'shirt', 'sneaker', 'bag', 
'ankle_boots'] 
# Make a prediction for a specific test image (11th image in the test set) 
predictions = model.predict(X_test[11:12]) 
label = labels[np.argmax(predictions)] 
# Print predicted label 
print(f"Predicted label: {label}") 
# Display the 11th image in the test set 
plt.imshow(X_test[11:12][0]) 
plt.show() 
 
